//==============================================
// Generated by http://www.My2ndGeneration.com
//==============================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Linq;
using System.Data;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Tiraggo.Core;
using Tiraggo.Interfaces;
using Tiraggo.DynamicQuery;

namespace DrugBank
{

	//===============================================
	// Concrete Entity Class
	//===============================================
	[DebuggerDisplay("Data = {Debug}")]
	[Serializable]
	[DataContract]
	[KnownType(typeof(Drugbankindo))]
	[XmlType("Drugbankindo")]
	public partial class Drugbankindo : tgDrugbankindo
	{
		[DebuggerBrowsable(DebuggerBrowsableState.RootHidden | DebuggerBrowsableState.Never)]
		protected override tgEntityDebuggerView[] Debug
		{
			get { return base.Debug; }
		}

		override public tgEntity CreateInstance()
		{
			return new Drugbankindo();
		}

		#region Static Quick Access Methods
		static public void Delete(System.Int32 wID)
		{
			var obj = new Drugbankindo();
			obj.WID = wID;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save();
		}

		static public void Delete(System.Int32 wID, tgSqlAccessType sqlAccessType)
		{
			var obj = new Drugbankindo();
			obj.WID = wID;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save(sqlAccessType);
		}
		#endregion
	}

	//===============================================
	// Abstract Entity Class
	//===============================================	
	[DataContract]
	[Serializable]
	abstract public partial class tgDrugbankindo : tgEntity
	{
		public tgDrugbankindo()
		{

		}

		#region LoadByPrimaryKey
		public virtual bool LoadByPrimaryKey(System.Int32 wID)
		{
			if (this.tg.Connection.SqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(wID);
			else
				return LoadByPrimaryKeyStoredProcedure(wID);
		}

		public virtual bool LoadByPrimaryKey(tgSqlAccessType sqlAccessType, System.Int32 wID)
		{
			if (sqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(wID);
			else
				return LoadByPrimaryKeyStoredProcedure(wID);
		}

		private bool LoadByPrimaryKeyDynamic(System.Int32 wID)
		{
			DrugbankindoQuery query = new DrugbankindoQuery("");
			query.Where(query.WID == wID);
			return this.Load(query);
		}

		private bool LoadByPrimaryKeyStoredProcedure(System.Int32 wID)
		{
			tgParameters parms = new tgParameters();
			parms.Add("WID", wID);
			return this.Load(tgQueryType.StoredProcedure, this.tg.spLoadByPrimaryKey, parms);
		}
		#endregion

		#region Properties

		/// <summary>
		/// Maps to Drugbankindo.WID
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public int? WID
		{
			get
			{
				return base.GetSystemInt32(DrugbankindoMetadata.ColumnNames.WID);
			}

			set
			{
				if (base.SetSystemInt32(DrugbankindoMetadata.ColumnNames.WID, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.WID);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Id
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Id
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Id);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Id, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Id);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Name
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Name
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Name);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Name, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Name);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Description
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Description
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Description);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Description, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Description);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.CASNumber
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string CASNumber
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.CASNumber);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.CASNumber, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.CASNumber);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.SynthesisRef
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string SynthesisRef
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.SynthesisRef);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.SynthesisRef, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.SynthesisRef);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Indication
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Indication
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Indication);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Indication, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Indication);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Pharmacology
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Pharmacology
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Pharmacology);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Pharmacology, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Pharmacology);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.MechanismOfAction
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string MechanismOfAction
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.MechanismOfAction);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.MechanismOfAction, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.MechanismOfAction);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Toxicity
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Toxicity
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Toxicity);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Toxicity, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Toxicity);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Absorption
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Absorption
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Absorption);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Absorption, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Absorption);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.HalfLife
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string HalfLife
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.HalfLife);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.HalfLife, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.HalfLife);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.ProteinBinding
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string ProteinBinding
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.ProteinBinding);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.ProteinBinding, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.ProteinBinding);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.RouteOfElimination
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string RouteOfElimination
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.RouteOfElimination);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.RouteOfElimination, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.RouteOfElimination);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.VolumeOfDistribution
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string VolumeOfDistribution
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.VolumeOfDistribution);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.VolumeOfDistribution, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.VolumeOfDistribution);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Clearance
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Clearance
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Clearance);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Clearance, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Clearance);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Type
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Type
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Type);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Type, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Type);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Updated
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Updated
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Updated);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Updated, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Updated);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.Created
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Created
		{
			get
			{
				return base.GetSystemString(DrugbankindoMetadata.ColumnNames.Created);
			}

			set
			{
				if (base.SetSystemString(DrugbankindoMetadata.ColumnNames.Created, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.Created);
				}
			}
		}

		/// <summary>
		/// Maps to Drugbankindo.DatasetWid
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public int? DatasetWid
		{
			get
			{
				return base.GetSystemInt32(DrugbankindoMetadata.ColumnNames.DatasetWid);
			}

			set
			{
				if (base.SetSystemInt32(DrugbankindoMetadata.ColumnNames.DatasetWid, value))
				{
					OnPropertyChanged(DrugbankindoMetadata.PropertyNames.DatasetWid);
				}
			}
		}


		// For Tiraggo.js support and basic serialization of extra properties
		// brought back via Joins
		[DataMember(EmitDefaultValue = false)]
        public tgKeyValuePair[] tgExtendedData
        {
            get
            {
                Dictionary<string, object> extra = GetExtraColumns();

                if (extra.Keys.Count > 0)
                {
                    List<tgKeyValuePair> extended = new List<tgKeyValuePair>();

                    foreach (string key in extra.Keys)
                    {
                        extended.Add(new tgKeyValuePair { Key = key, Value = extra[key] });
                    }

                    return extended.ToArray();
                }

                return null;
            }

            set
            {
                foreach (tgKeyValuePair pair in value)
                {
                    this.SetColumn(pair.Key, pair.Value);
                }
            }
        }

		#endregion

		#region Housekeeping methods

		override protected IMetadata Meta
		{
			get
			{
				return DrugbankindoMetadata.Meta();
			}
		}

		#endregion

		#region Query Logic

		public DrugbankindoQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new DrugbankindoQuery("");
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(DrugbankindoQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return this.Query.Load();
		}

		protected void InitQuery(DrugbankindoQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;

			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntity)this).Connection;
			}
		}

		#endregion

		[IgnoreDataMember]
		private DrugbankindoQuery query;
	}

	//===============================================
	// Concrete Collection Class
	//===============================================
	[DebuggerDisplay("Count = {Count}")]
	[Serializable]
	[CollectionDataContract]
	[XmlType("DrugbankindoCollection")]
	public partial class DrugbankindoCollection : tgDrugbankindoCollection, IEnumerable<Drugbankindo>
	{
		public Drugbankindo FindByPrimaryKey(int wID)
		{
			return this.SingleOrDefault(e => e.WID == wID);
		}

		#region WCF Service Class

		[DataContract]
		[KnownType(typeof(Drugbankindo))]
		public class DrugbankindoCollectionWCFPacket : tgCollectionWCFPacket<DrugbankindoCollection>
		{
			public static implicit operator DrugbankindoCollection(DrugbankindoCollectionWCFPacket packet)
			{
				return packet.Collection;
			}

			public static implicit operator DrugbankindoCollectionWCFPacket(DrugbankindoCollection collection)
			{
				return new DrugbankindoCollectionWCFPacket() { Collection = collection };
			}
		}

		#endregion
	}

	//===============================================
	// Abstract Collection Class
	//===============================================	
	[Serializable]
	abstract public partial class tgDrugbankindoCollection : tgEntityCollection<Drugbankindo>
	{
		#region Housekeeping methods
		override protected IMetadata Meta
		{
			get
			{
				return DrugbankindoMetadata.Meta();
			}
		}

		protected override string GetCollectionName()
		{
			return "DrugbankindoCollection";
		}

		#endregion

		#region Query Logic

		[BrowsableAttribute(false)]
		public DrugbankindoQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new DrugbankindoQuery("");
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(DrugbankindoQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return Query.Load();
		}

		override protected tgDynamicQuery GetDynamicQuery()
		{
			if (this.query == null)
			{
				this.query = new DrugbankindoQuery("");
				this.InitQuery(query);
			}
			return this.query;
		}

		protected void InitQuery(DrugbankindoQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;
			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntityCollection)this).Connection;
			}
		}

		protected override void HookupQuery(tgDynamicQuery query)
		{
			this.InitQuery((DrugbankindoQuery)query);
		}

		#endregion

		private DrugbankindoQuery query;
	}	

	//===============================================
	// Concrete Query Class
	//===============================================	
	[DebuggerDisplay("Query = {Parse()}")]
	public partial class DrugbankindoQuery : tgDrugbankindoQuery
	{
		public DrugbankindoQuery(string joinAlias)
		{
			this.tg.JoinAlias = joinAlias;
		}

		override protected string GetQueryName()
		{
			return "DrugbankindoQuery";
		}

		#region Explicit Casts

		public static explicit operator string(DrugbankindoQuery query)
		{
			return DrugbankindoQuery.SerializeHelper.ToXml(query);
		}

		public static explicit operator DrugbankindoQuery(string query)
		{
			return (DrugbankindoQuery)DrugbankindoQuery.SerializeHelper.FromXml(query, typeof(DrugbankindoQuery));
		}

		#endregion
	}

	//===============================================
	// Abstract Query Class
	//===============================================
	abstract public partial class tgDrugbankindoQuery : tgDynamicQuery
	{
		override protected IMetadata Meta
		{
			get
			{
				return DrugbankindoMetadata.Meta();
			}
		}	

		#region QueryItemFromName

		protected override tgQueryItem QueryItemFromName(string name)
		{
			switch (name)
			{
				case "WID": return this.WID;
				case "Id": return this.Id;
				case "Name": return this.Name;
				case "Description": return this.Description;
				case "CASNumber": return this.CASNumber;
				case "SynthesisRef": return this.SynthesisRef;
				case "Indication": return this.Indication;
				case "Pharmacology": return this.Pharmacology;
				case "MechanismOfAction": return this.MechanismOfAction;
				case "Toxicity": return this.Toxicity;
				case "Absorption": return this.Absorption;
				case "HalfLife": return this.HalfLife;
				case "ProteinBinding": return this.ProteinBinding;
				case "RouteOfElimination": return this.RouteOfElimination;
				case "VolumeOfDistribution": return this.VolumeOfDistribution;
				case "Clearance": return this.Clearance;
				case "Type": return this.Type;
				case "Updated": return this.Updated;
				case "Created": return this.Created;
				case "DatasetWid": return this.DatasetWid;

				default: return null;
			}
		}		

		#endregion

		#region tgQueryItems

		public tgQueryItem WID
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.WID, tgSystemType.Int32); }		
		}

		public tgQueryItem Id
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Id, tgSystemType.String); }		
		}

		public tgQueryItem Name
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Name, tgSystemType.String); }		
		}

		public tgQueryItem Description
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Description, tgSystemType.String); }		
		}

		public tgQueryItem CASNumber
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.CASNumber, tgSystemType.String); }		
		}

		public tgQueryItem SynthesisRef
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.SynthesisRef, tgSystemType.String); }		
		}

		public tgQueryItem Indication
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Indication, tgSystemType.String); }		
		}

		public tgQueryItem Pharmacology
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Pharmacology, tgSystemType.String); }		
		}

		public tgQueryItem MechanismOfAction
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.MechanismOfAction, tgSystemType.String); }		
		}

		public tgQueryItem Toxicity
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Toxicity, tgSystemType.String); }		
		}

		public tgQueryItem Absorption
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Absorption, tgSystemType.String); }		
		}

		public tgQueryItem HalfLife
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.HalfLife, tgSystemType.String); }		
		}

		public tgQueryItem ProteinBinding
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.ProteinBinding, tgSystemType.String); }		
		}

		public tgQueryItem RouteOfElimination
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.RouteOfElimination, tgSystemType.String); }		
		}

		public tgQueryItem VolumeOfDistribution
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.VolumeOfDistribution, tgSystemType.String); }		
		}

		public tgQueryItem Clearance
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Clearance, tgSystemType.String); }		
		}

		public tgQueryItem Type
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Type, tgSystemType.String); }		
		}

		public tgQueryItem Updated
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Updated, tgSystemType.String); }		
		}

		public tgQueryItem Created
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.Created, tgSystemType.String); }		
		}

		public tgQueryItem DatasetWid
		{
			get { return new tgQueryItem(this, DrugbankindoMetadata.ColumnNames.DatasetWid, tgSystemType.Int32); }		
		}


		#endregion
	}

	//===============================================
	// Concrete Metadata Class
	//===============================================
	[Serializable]
	public partial class DrugbankindoMetadata : tgMetadata, IMetadata
	{
		#region Protected Constructor
		protected DrugbankindoMetadata()
		{
			m_columns = new tgColumnMetadataCollection();
			tgColumnMetadata c;

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.WID, 0, typeof(System.Int32), tgSystemType.Int32);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.WID;
			c.IsInPrimaryKey = true;
			c.CharacterMaxLength = 20;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Id, 1, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Id;
			c.CharacterMaxLength = 10;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Name, 2, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Name;
			c.CharacterMaxLength = 255;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Description, 3, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Description;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.CASNumber, 4, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.CASNumber;
			c.IsNullable = true;
			c.CharacterMaxLength = 20;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.SynthesisRef, 5, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.SynthesisRef;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Indication, 6, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Indication;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Pharmacology, 7, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Pharmacology;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.MechanismOfAction, 8, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.MechanismOfAction;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Toxicity, 9, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Toxicity;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Absorption, 10, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Absorption;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.HalfLife, 11, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.HalfLife;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.ProteinBinding, 12, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.ProteinBinding;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.RouteOfElimination, 13, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.RouteOfElimination;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.VolumeOfDistribution, 14, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.VolumeOfDistribution;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Clearance, 15, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Clearance;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Type, 16, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Type;
			c.IsNullable = true;
			c.CharacterMaxLength = 25;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Updated, 17, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Updated;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.Created, 18, typeof(System.String), tgSystemType.String);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.Created;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DrugbankindoMetadata.ColumnNames.DatasetWid, 19, typeof(System.Int32), tgSystemType.Int32);			
			c.PropertyName = DrugbankindoMetadata.PropertyNames.DatasetWid;
			c.CharacterMaxLength = 20;
			m_columns.Add(c);
		}
		#endregion

		static public DrugbankindoMetadata Meta()
		{
			return meta;
		}

		public Guid DataID
		{
			get { return base.m_dataID; }
		}

		public bool MultiProviderMode
		{
			get { return false; }
		}

		public tgColumnMetadataCollection Columns
		{
			get { return base.m_columns; }
		}

		#region ColumnNames
		public class ColumnNames
		{
			public const string WID = "WID";
			public const string Id = "Id";
			public const string Name = "Name";
			public const string Description = "Description";
			public const string CASNumber = "CASNumber";
			public const string SynthesisRef = "SynthesisRef";
			public const string Indication = "Indication";
			public const string Pharmacology = "Pharmacology";
			public const string MechanismOfAction = "MechanismOfAction";
			public const string Toxicity = "Toxicity";
			public const string Absorption = "Absorption";
			public const string HalfLife = "HalfLife";
			public const string ProteinBinding = "ProteinBinding";
			public const string RouteOfElimination = "RouteOfElimination";
			public const string VolumeOfDistribution = "VolumeOfDistribution";
			public const string Clearance = "Clearance";
			public const string Type = "Type";
			public const string Updated = "Updated";
			public const string Created = "Created";
			public const string DatasetWid = "DataSet_WID";
		}
		#endregion

		#region PropertyNames
		public class PropertyNames
		{
			public const string WID = "WID";
			public const string Id = "Id";
			public const string Name = "Name";
			public const string Description = "Description";
			public const string CASNumber = "CASNumber";
			public const string SynthesisRef = "SynthesisRef";
			public const string Indication = "Indication";
			public const string Pharmacology = "Pharmacology";
			public const string MechanismOfAction = "MechanismOfAction";
			public const string Toxicity = "Toxicity";
			public const string Absorption = "Absorption";
			public const string HalfLife = "HalfLife";
			public const string ProteinBinding = "ProteinBinding";
			public const string RouteOfElimination = "RouteOfElimination";
			public const string VolumeOfDistribution = "VolumeOfDistribution";
			public const string Clearance = "Clearance";
			public const string Type = "Type";
			public const string Updated = "Updated";
			public const string Created = "Created";
			public const string DatasetWid = "DatasetWid";
		}
		#endregion

		public tgProviderSpecificMetadata GetProviderMetadata(string mapName)
		{
			MapToMeta mapMethod = mapDelegates[mapName];
			if (mapMethod != null)
				return mapMethod(mapName);
			else
				return null;
		}

		#region MAP esDefault

		static private int RegisterDelegateesDefault()
		{
			// This is only executed once per the life of the application
			lock (typeof(DrugbankindoMetadata))
			{
				if (DrugbankindoMetadata.mapDelegates == null)
				{
					DrugbankindoMetadata.mapDelegates = new Dictionary<string, MapToMeta>();
				}

				if (DrugbankindoMetadata.meta == null)
				{
					DrugbankindoMetadata.meta = new DrugbankindoMetadata();
				}

				MapToMeta mapMethod = new MapToMeta(meta.tgDefault);
				mapDelegates.Add("tgDefault", mapMethod);
				mapMethod("tgDefault");
			}
			return 0;
		}

		private tgProviderSpecificMetadata tgDefault(string mapName)
		{
			if (!m_providerMetadataMaps.ContainsKey(mapName))
			{
				tgProviderSpecificMetadata meta = new tgProviderSpecificMetadata();


				meta.AddTypeMap("WID", new tgTypeMap("integer", "System.Int32"));
				meta.AddTypeMap("Id", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Name", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Description", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("CASNumber", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("SynthesisRef", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Indication", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Pharmacology", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("MechanismOfAction", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Toxicity", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Absorption", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("HalfLife", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("ProteinBinding", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("RouteOfElimination", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("VolumeOfDistribution", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Clearance", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Type", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Updated", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Created", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("DatasetWid", new tgTypeMap("integer", "System.Int32"));

				meta.Source = "drugbankindo";
				meta.Destination = "drugbankindo";

				meta.spInsert = "proc_DrugbankindoInsert";
				meta.spUpdate = "proc_DrugbankindoUpdate";
				meta.spDelete = "proc_DrugbankindoDelete";
				meta.spLoadAll = "proc_DrugbankindoLoadAll";
				meta.spLoadByPrimaryKey = "proc_DrugbankindoLoadByPrimaryKey";

				this.m_providerMetadataMaps["tgDefault"] = meta;
			}

			return this.m_providerMetadataMaps["tgDefault"];
		}

		#endregion

		static private DrugbankindoMetadata meta;
		static protected Dictionary<string, MapToMeta> mapDelegates;
		static private int _tgDefault = RegisterDelegateesDefault();
	}
}

