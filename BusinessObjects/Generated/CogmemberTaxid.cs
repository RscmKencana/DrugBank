
//==============================================
// Generated by http://www.My2ndGeneration.com
//==============================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Linq;
using System.Data;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Tiraggo.Core;
using Tiraggo.Interfaces;
using Tiraggo.DynamicQuery;

namespace BusinessObjects
{

	//===============================================
	// Concrete Entity Class
	//===============================================
	[DebuggerDisplay("Data = {Debug}")]
	[Serializable]
	[DataContract]
	[KnownType(typeof(CogmemberTaxid))]
	[XmlType("CogmemberTaxid")]
	public partial class CogmemberTaxid : tgCogmemberTaxid
	{
		[DebuggerBrowsable(DebuggerBrowsableState.RootHidden | DebuggerBrowsableState.Never)]
		protected override tgEntityDebuggerView[] Debug
		{
			get { return base.Debug; }
		}

		override public tgEntity CreateInstance()
		{
			return new CogmemberTaxid();
		}

		#region Static Quick Access Methods
		static public void Delete(System.String organism, System.Int32 taxId)
		{
			var obj = new CogmemberTaxid();
			obj.Organism = organism;
			obj.TaxId = taxId;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save();
		}

		static public void Delete(System.String organism, System.Int32 taxId, tgSqlAccessType sqlAccessType)
		{
			var obj = new CogmemberTaxid();
			obj.Organism = organism;
			obj.TaxId = taxId;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save(sqlAccessType);
		}
		#endregion
	}

	//===============================================
	// Abstract Entity Class
	//===============================================	
	[DataContract]
	[Serializable]
	abstract public partial class tgCogmemberTaxid : tgEntity
	{
		public tgCogmemberTaxid()
		{

		}

		#region LoadByPrimaryKey
		public virtual bool LoadByPrimaryKey(System.String organism, System.Int32 taxId)
		{
			if (this.tg.Connection.SqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(organism, taxId);
			else
				return LoadByPrimaryKeyStoredProcedure(organism, taxId);
		}

		public virtual bool LoadByPrimaryKey(tgSqlAccessType sqlAccessType, System.String organism, System.Int32 taxId)
		{
			if (sqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(organism, taxId);
			else
				return LoadByPrimaryKeyStoredProcedure(organism, taxId);
		}

		private bool LoadByPrimaryKeyDynamic(System.String organism, System.Int32 taxId)
		{
			CogmemberTaxidQuery query = new CogmemberTaxidQuery("r1");
			query.Where(query.Organism == organism && query.TaxId == taxId);
			return this.Load(query);
		}

		private bool LoadByPrimaryKeyStoredProcedure(System.String organism, System.Int32 taxId)
		{
			tgParameters parms = new tgParameters();
			parms.Add("Organism", organism);
			parms.Add("TaxId", taxId);
			return this.Load(tgQueryType.StoredProcedure, this.tg.spLoadByPrimaryKey, parms);
		}
		#endregion

		#region Properties

		/// <summary>
		/// Maps to CogmemberTaxid.Organism
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Organism
		{
			get
			{
				return base.GetSystemString(CogmemberTaxidMetadata.ColumnNames.Organism);
			}

			set
			{
				if (base.SetSystemString(CogmemberTaxidMetadata.ColumnNames.Organism, value))
				{
					OnPropertyChanged(CogmemberTaxidMetadata.PropertyNames.Organism);
				}
			}
		}

		/// <summary>
		/// Maps to CogmemberTaxid.TaxId
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public int? TaxId
		{
			get
			{
				return base.GetSystemInt32(CogmemberTaxidMetadata.ColumnNames.TaxId);
			}

			set
			{
				if (base.SetSystemInt32(CogmemberTaxidMetadata.ColumnNames.TaxId, value))
				{
					OnPropertyChanged(CogmemberTaxidMetadata.PropertyNames.TaxId);
				}
			}
		}


		// For Tiraggo.js support and basic serialization of extra properties
		// brought back via Joins
		[DataMember(EmitDefaultValue = false)]
        public tgKeyValuePair[] tgExtendedData
        {
            get
            {
                Dictionary<string, object> extra = GetExtraColumns();

                if (extra.Keys.Count > 0)
                {
                    List<tgKeyValuePair> extended = new List<tgKeyValuePair>();

                    foreach (string key in extra.Keys)
                    {
                        extended.Add(new tgKeyValuePair { Key = key, Value = extra[key] });
                    }

                    return extended.ToArray();
                }

                return null;
            }

            set
            {
                foreach (tgKeyValuePair pair in value)
                {
                    this.SetColumn(pair.Key, pair.Value);
                }
            }
        }

		#endregion

		#region Housekeeping methods

		override protected IMetadata Meta
		{
			get
			{
				return CogmemberTaxidMetadata.Meta();
			}
		}

		#endregion

		#region Query Logic

		public CogmemberTaxidQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new CogmemberTaxidQuery("s1");
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(CogmemberTaxidQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return this.Query.Load();
		}

		protected void InitQuery(CogmemberTaxidQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;

			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntity)this).Connection;
			}
		}

		#endregion

		[IgnoreDataMember]
		private CogmemberTaxidQuery query;
	}

	//===============================================
	// Concrete Collection Class
	//===============================================
	[DebuggerDisplay("Count = {Count}")]
	[Serializable]
	[CollectionDataContract]
	[XmlType("CogmemberTaxidCollection")]
	public partial class CogmemberTaxidCollection : tgCogmemberTaxidCollection, IEnumerable<CogmemberTaxid>
	{
		public CogmemberTaxid FindByPrimaryKey(string organism, int taxId)
		{
			return this.SingleOrDefault(e => e.Organism == organism && e.TaxId == taxId);
		}

		#region WCF Service Class

		[DataContract]
		[KnownType(typeof(CogmemberTaxid))]
		public class CogmemberTaxidCollectionWCFPacket : tgCollectionWCFPacket<CogmemberTaxidCollection>
		{
			public static implicit operator CogmemberTaxidCollection(CogmemberTaxidCollectionWCFPacket packet)
			{
				return packet.Collection;
			}

			public static implicit operator CogmemberTaxidCollectionWCFPacket(CogmemberTaxidCollection collection)
			{
				return new CogmemberTaxidCollectionWCFPacket() { Collection = collection };
			}
		}

		#endregion
	}

	//===============================================
	// Abstract Collection Class
	//===============================================	
	[Serializable]
	abstract public partial class tgCogmemberTaxidCollection : tgEntityCollection<CogmemberTaxid>
	{
		#region Housekeeping methods
		override protected IMetadata Meta
		{
			get
			{
				return CogmemberTaxidMetadata.Meta();
			}
		}

		protected override string GetCollectionName()
		{
			return "CogmemberTaxidCollection";
		}

		#endregion

		#region Query Logic

		[BrowsableAttribute(false)]
		public CogmemberTaxidQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new CogmemberTaxidQuery("t1");
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(CogmemberTaxidQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return Query.Load();
		}

		override protected tgDynamicQuery GetDynamicQuery()
		{
			if (this.query == null)
			{
				this.query = new CogmemberTaxidQuery("u1");
				this.InitQuery(query);
			}
			return this.query;
		}

		protected void InitQuery(CogmemberTaxidQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;
			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntityCollection)this).Connection;
			}
		}

		protected override void HookupQuery(tgDynamicQuery query)
		{
			this.InitQuery((CogmemberTaxidQuery)query);
		}

		#endregion

		private CogmemberTaxidQuery query;
	}	

	//===============================================
	// Concrete Query Class
	//===============================================	
	[DebuggerDisplay("Query = {Parse()}")]
	public partial class CogmemberTaxidQuery : tgCogmemberTaxidQuery
	{
		public CogmemberTaxidQuery(string joinAlias)
		{
			this.tg.JoinAlias = joinAlias;
		}

		override protected string GetQueryName()
		{
			return "CogmemberTaxidQuery";
		}

		#region Explicit Casts

		public static explicit operator string(CogmemberTaxidQuery query)
		{
			return CogmemberTaxidQuery.SerializeHelper.ToXml(query);
		}

		public static explicit operator CogmemberTaxidQuery(string query)
		{
			return (CogmemberTaxidQuery)CogmemberTaxidQuery.SerializeHelper.FromXml(query, typeof(CogmemberTaxidQuery));
		}

		#endregion
	}

	//===============================================
	// Abstract Query Class
	//===============================================
	abstract public partial class tgCogmemberTaxidQuery : tgDynamicQuery
	{
		override protected IMetadata Meta
		{
			get
			{
				return CogmemberTaxidMetadata.Meta();
			}
		}	

		#region QueryItemFromName

		protected override tgQueryItem QueryItemFromName(string name)
		{
			switch (name)
			{
				case "Organism": return this.Organism;
				case "TaxId": return this.TaxId;

				default: return null;
			}
		}		

		#endregion

		#region tgQueryItems

		public tgQueryItem Organism
		{
			get { return new tgQueryItem(this, CogmemberTaxidMetadata.ColumnNames.Organism, tgSystemType.String); }
		}

		public tgQueryItem TaxId
		{
			get { return new tgQueryItem(this, CogmemberTaxidMetadata.ColumnNames.TaxId, tgSystemType.Int32); }
		}


		#endregion
	}

	//===============================================
	// Concrete Metadata Class
	//===============================================
	[Serializable]
	public partial class CogmemberTaxidMetadata : tgMetadata, IMetadata
	{
		#region Protected Constructor
		protected CogmemberTaxidMetadata()
		{
			m_columns = new tgColumnMetadataCollection();
			tgColumnMetadata c;

			c = new tgColumnMetadata(CogmemberTaxidMetadata.ColumnNames.Organism, 0, typeof(System.String), tgSystemType.String);
			c.PropertyName = CogmemberTaxidMetadata.PropertyNames.Organism;
			c.IsInPrimaryKey = true;
			c.CharacterMaxLength = 10;
			m_columns.Add(c);

			c = new tgColumnMetadata(CogmemberTaxidMetadata.ColumnNames.TaxId, 1, typeof(System.Int32), tgSystemType.Int32);
			c.PropertyName = CogmemberTaxidMetadata.PropertyNames.TaxId;
			c.IsInPrimaryKey = true;
			c.CharacterMaxLength = 20;
			m_columns.Add(c);
		}
		#endregion

		static public CogmemberTaxidMetadata Meta()
		{
			return meta;
		}

		public Guid DataID
		{
			get { return base.m_dataID; }
		}

		public bool MultiProviderMode
		{
			get { return false; }
		}

		public tgColumnMetadataCollection Columns
		{
			get { return base.m_columns; }
		}

		#region ColumnNames
		public class ColumnNames
		{
			public const string Organism = "Organism";
			public const string TaxId = "TaxId";
		}
		#endregion

		#region PropertyNames
		public class PropertyNames
		{
			public const string Organism = "Organism";
			public const string TaxId = "TaxId";
		}
		#endregion

		public tgProviderSpecificMetadata GetProviderMetadata(string mapName)
		{
			MapToMeta mapMethod = mapDelegates[mapName];
			if (mapMethod != null)
				return mapMethod(mapName);
			else
				return null;
		}

		#region MAP esDefault

		static private int RegisterDelegateesDefault()
		{
			// This is only executed once per the life of the application
			lock (typeof(CogmemberTaxidMetadata))
			{
				if (CogmemberTaxidMetadata.mapDelegates == null)
				{
					CogmemberTaxidMetadata.mapDelegates = new Dictionary<string, MapToMeta>();
				}

				if (CogmemberTaxidMetadata.meta == null)
				{
					CogmemberTaxidMetadata.meta = new CogmemberTaxidMetadata();
				}

				MapToMeta mapMethod = new MapToMeta(meta.tgDefault);
				mapDelegates.Add("tgDefault", mapMethod);
				mapMethod("tgDefault");
			}
			return 0;
		}

		private tgProviderSpecificMetadata tgDefault(string mapName)
		{
			if (!m_providerMetadataMaps.ContainsKey(mapName))
			{
				tgProviderSpecificMetadata meta = new tgProviderSpecificMetadata();


				meta.AddTypeMap("Organism", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("TaxId", new tgTypeMap("integer", "System.Int32"));

				meta.Source = "cogmember_taxid";
				meta.Destination = "cogmember_taxid";

				meta.spInsert = "proc_CogmemberTaxidInsert";
				meta.spUpdate = "proc_CogmemberTaxidUpdate";
				meta.spDelete = "proc_CogmemberTaxidDelete";
				meta.spLoadAll = "proc_CogmemberTaxidLoadAll";
				meta.spLoadByPrimaryKey = "proc_CogmemberTaxidLoadByPrimaryKey";

				this.m_providerMetadataMaps["tgDefault"] = meta;
			}

			return this.m_providerMetadataMaps["tgDefault"];
		}

		#endregion

		static private CogmemberTaxidMetadata meta;
		static protected Dictionary<string, MapToMeta> mapDelegates;
		static private int _tgDefault = RegisterDelegateesDefault();
	}
}

