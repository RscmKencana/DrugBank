
//==============================================
// Generated by http://www.My2ndGeneration.com
//==============================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Linq;
using System.Data;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Tiraggo.Core;
using Tiraggo.Interfaces;
using Tiraggo.DynamicQuery;

namespace BusinessObjects
{

	//===============================================
	// Concrete Entity Class
	//===============================================
	[DebuggerDisplay("Data = {Debug}")]
	[Serializable]
	[DataContract]
	[KnownType(typeof(Ncbicitationtemp))]
	[XmlType("Ncbicitationtemp")]
	public partial class Ncbicitationtemp : tgNcbicitationtemp
	{
		[DebuggerBrowsable(DebuggerBrowsableState.RootHidden | DebuggerBrowsableState.Never)]
		protected override tgEntityDebuggerView[] Debug
		{
			get { return base.Debug; }
		}

		override public tgEntity CreateInstance()
		{
			return new Ncbicitationtemp();
		}

	}

	//===============================================
	// Abstract Entity Class
	//===============================================	
	[DataContract]
	[Serializable]
	abstract public partial class tgNcbicitationtemp : tgEntity
	{
		public tgNcbicitationtemp()
		{

		}


		#region Properties

		/// <summary>
		/// Maps to Ncbicitationtemp.CitId
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public int? CitId
		{
			get
			{
				return base.GetSystemInt32(NcbicitationtempMetadata.ColumnNames.CitId);
			}

			set
			{
				if (base.SetSystemInt32(NcbicitationtempMetadata.ColumnNames.CitId, value))
				{
					OnPropertyChanged(NcbicitationtempMetadata.PropertyNames.CitId);
				}
			}
		}

		/// <summary>
		/// Maps to Ncbicitationtemp.CitKey
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string CitKey
		{
			get
			{
				return base.GetSystemString(NcbicitationtempMetadata.ColumnNames.CitKey);
			}

			set
			{
				if (base.SetSystemString(NcbicitationtempMetadata.ColumnNames.CitKey, value))
				{
					OnPropertyChanged(NcbicitationtempMetadata.PropertyNames.CitKey);
				}
			}
		}

		/// <summary>
		/// Maps to Ncbicitationtemp.PubmedId
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public int? PubmedId
		{
			get
			{
				return base.GetSystemInt32(NcbicitationtempMetadata.ColumnNames.PubmedId);
			}

			set
			{
				if (base.SetSystemInt32(NcbicitationtempMetadata.ColumnNames.PubmedId, value))
				{
					OnPropertyChanged(NcbicitationtempMetadata.PropertyNames.PubmedId);
				}
			}
		}

		/// <summary>
		/// Maps to Ncbicitationtemp.MedlineId
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public int? MedlineId
		{
			get
			{
				return base.GetSystemInt32(NcbicitationtempMetadata.ColumnNames.MedlineId);
			}

			set
			{
				if (base.SetSystemInt32(NcbicitationtempMetadata.ColumnNames.MedlineId, value))
				{
					OnPropertyChanged(NcbicitationtempMetadata.PropertyNames.MedlineId);
				}
			}
		}

		/// <summary>
		/// Maps to Ncbicitationtemp.Url
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Url
		{
			get
			{
				return base.GetSystemString(NcbicitationtempMetadata.ColumnNames.Url);
			}

			set
			{
				if (base.SetSystemString(NcbicitationtempMetadata.ColumnNames.Url, value))
				{
					OnPropertyChanged(NcbicitationtempMetadata.PropertyNames.Url);
				}
			}
		}

		/// <summary>
		/// Maps to Ncbicitationtemp.Text
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Text
		{
			get
			{
				return base.GetSystemString(NcbicitationtempMetadata.ColumnNames.Text);
			}

			set
			{
				if (base.SetSystemString(NcbicitationtempMetadata.ColumnNames.Text, value))
				{
					OnPropertyChanged(NcbicitationtempMetadata.PropertyNames.Text);
				}
			}
		}

		/// <summary>
		/// Maps to Ncbicitationtemp.TaxidList
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string TaxidList
		{
			get
			{
				return base.GetSystemString(NcbicitationtempMetadata.ColumnNames.TaxidList);
			}

			set
			{
				if (base.SetSystemString(NcbicitationtempMetadata.ColumnNames.TaxidList, value))
				{
					OnPropertyChanged(NcbicitationtempMetadata.PropertyNames.TaxidList);
				}
			}
		}


		// For Tiraggo.js support and basic serialization of extra properties
		// brought back via Joins
		[DataMember(EmitDefaultValue = false)]
        public tgKeyValuePair[] tgExtendedData
        {
            get
            {
                Dictionary<string, object> extra = GetExtraColumns();

                if (extra.Keys.Count > 0)
                {
                    List<tgKeyValuePair> extended = new List<tgKeyValuePair>();

                    foreach (string key in extra.Keys)
                    {
                        extended.Add(new tgKeyValuePair { Key = key, Value = extra[key] });
                    }

                    return extended.ToArray();
                }

                return null;
            }

            set
            {
                foreach (tgKeyValuePair pair in value)
                {
                    this.SetColumn(pair.Key, pair.Value);
                }
            }
        }

		#endregion

		#region Housekeeping methods

		override protected IMetadata Meta
		{
			get
			{
				return NcbicitationtempMetadata.Meta();
			}
		}

		#endregion

		#region Query Logic

		public NcbicitationtempQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new NcbicitationtempQuery("an1");
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(NcbicitationtempQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return this.Query.Load();
		}

		protected void InitQuery(NcbicitationtempQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;

			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntity)this).Connection;
			}
		}

		#endregion

		[IgnoreDataMember]
		private NcbicitationtempQuery query;
	}

	//===============================================
	// Concrete Collection Class
	//===============================================
	[DebuggerDisplay("Count = {Count}")]
	[Serializable]
	[CollectionDataContract]
	[XmlType("NcbicitationtempCollection")]
	public partial class NcbicitationtempCollection : tgNcbicitationtempCollection, IEnumerable<Ncbicitationtemp>
	{

		#region WCF Service Class

		[DataContract]
		[KnownType(typeof(Ncbicitationtemp))]
		public class NcbicitationtempCollectionWCFPacket : tgCollectionWCFPacket<NcbicitationtempCollection>
		{
			public static implicit operator NcbicitationtempCollection(NcbicitationtempCollectionWCFPacket packet)
			{
				return packet.Collection;
			}

			public static implicit operator NcbicitationtempCollectionWCFPacket(NcbicitationtempCollection collection)
			{
				return new NcbicitationtempCollectionWCFPacket() { Collection = collection };
			}
		}

		#endregion
	}

	//===============================================
	// Abstract Collection Class
	//===============================================	
	[Serializable]
	abstract public partial class tgNcbicitationtempCollection : tgEntityCollection<Ncbicitationtemp>
	{
		#region Housekeeping methods
		override protected IMetadata Meta
		{
			get
			{
				return NcbicitationtempMetadata.Meta();
			}
		}

		protected override string GetCollectionName()
		{
			return "NcbicitationtempCollection";
		}

		#endregion

		#region Query Logic

		[BrowsableAttribute(false)]
		public NcbicitationtempQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new NcbicitationtempQuery("ao1");
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(NcbicitationtempQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return Query.Load();
		}

		override protected tgDynamicQuery GetDynamicQuery()
		{
			if (this.query == null)
			{
				this.query = new NcbicitationtempQuery("ap1");
				this.InitQuery(query);
			}
			return this.query;
		}

		protected void InitQuery(NcbicitationtempQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;
			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntityCollection)this).Connection;
			}
		}

		protected override void HookupQuery(tgDynamicQuery query)
		{
			this.InitQuery((NcbicitationtempQuery)query);
		}

		#endregion

		private NcbicitationtempQuery query;
	}	

	//===============================================
	// Concrete Query Class
	//===============================================	
	[DebuggerDisplay("Query = {Parse()}")]
	public partial class NcbicitationtempQuery : tgNcbicitationtempQuery
	{
		public NcbicitationtempQuery(string joinAlias)
		{
			this.tg.JoinAlias = joinAlias;
		}

		override protected string GetQueryName()
		{
			return "NcbicitationtempQuery";
		}

		#region Explicit Casts

		public static explicit operator string(NcbicitationtempQuery query)
		{
			return NcbicitationtempQuery.SerializeHelper.ToXml(query);
		}

		public static explicit operator NcbicitationtempQuery(string query)
		{
			return (NcbicitationtempQuery)NcbicitationtempQuery.SerializeHelper.FromXml(query, typeof(NcbicitationtempQuery));
		}

		#endregion
	}

	//===============================================
	// Abstract Query Class
	//===============================================
	abstract public partial class tgNcbicitationtempQuery : tgDynamicQuery
	{
		override protected IMetadata Meta
		{
			get
			{
				return NcbicitationtempMetadata.Meta();
			}
		}	

		#region QueryItemFromName

		protected override tgQueryItem QueryItemFromName(string name)
		{
			switch (name)
			{
				case "CitId": return this.CitId;
				case "CitKey": return this.CitKey;
				case "PubmedId": return this.PubmedId;
				case "MedlineId": return this.MedlineId;
				case "Url": return this.Url;
				case "Text": return this.Text;
				case "TaxidList": return this.TaxidList;

				default: return null;
			}
		}		

		#endregion

		#region tgQueryItems

		public tgQueryItem CitId
		{
			get { return new tgQueryItem(this, NcbicitationtempMetadata.ColumnNames.CitId, tgSystemType.Int32); }
		}

		public tgQueryItem CitKey
		{
			get { return new tgQueryItem(this, NcbicitationtempMetadata.ColumnNames.CitKey, tgSystemType.String); }
		}

		public tgQueryItem PubmedId
		{
			get { return new tgQueryItem(this, NcbicitationtempMetadata.ColumnNames.PubmedId, tgSystemType.Int32); }
		}

		public tgQueryItem MedlineId
		{
			get { return new tgQueryItem(this, NcbicitationtempMetadata.ColumnNames.MedlineId, tgSystemType.Int32); }
		}

		public tgQueryItem Url
		{
			get { return new tgQueryItem(this, NcbicitationtempMetadata.ColumnNames.Url, tgSystemType.String); }
		}

		public tgQueryItem Text
		{
			get { return new tgQueryItem(this, NcbicitationtempMetadata.ColumnNames.Text, tgSystemType.String); }
		}

		public tgQueryItem TaxidList
		{
			get { return new tgQueryItem(this, NcbicitationtempMetadata.ColumnNames.TaxidList, tgSystemType.String); }
		}


		#endregion
	}

	//===============================================
	// Concrete Metadata Class
	//===============================================
	[Serializable]
	public partial class NcbicitationtempMetadata : tgMetadata, IMetadata
	{
		#region Protected Constructor
		protected NcbicitationtempMetadata()
		{
			m_columns = new tgColumnMetadataCollection();
			tgColumnMetadata c;

			c = new tgColumnMetadata(NcbicitationtempMetadata.ColumnNames.CitId, 0, typeof(System.Int32), tgSystemType.Int32);
			c.PropertyName = NcbicitationtempMetadata.PropertyNames.CitId;
			c.CharacterMaxLength = 11;
			m_columns.Add(c);

			c = new tgColumnMetadata(NcbicitationtempMetadata.ColumnNames.CitKey, 1, typeof(System.String), tgSystemType.String);
			c.PropertyName = NcbicitationtempMetadata.PropertyNames.CitKey;
			c.CharacterMaxLength = 500;
			m_columns.Add(c);

			c = new tgColumnMetadata(NcbicitationtempMetadata.ColumnNames.PubmedId, 2, typeof(System.Int32), tgSystemType.Int32);
			c.PropertyName = NcbicitationtempMetadata.PropertyNames.PubmedId;
			c.IsNullable = true;
			c.CharacterMaxLength = 11;
			m_columns.Add(c);

			c = new tgColumnMetadata(NcbicitationtempMetadata.ColumnNames.MedlineId, 3, typeof(System.Int32), tgSystemType.Int32);
			c.PropertyName = NcbicitationtempMetadata.PropertyNames.MedlineId;
			c.IsNullable = true;
			c.CharacterMaxLength = 11;
			m_columns.Add(c);

			c = new tgColumnMetadata(NcbicitationtempMetadata.ColumnNames.Url, 4, typeof(System.String), tgSystemType.String);
			c.PropertyName = NcbicitationtempMetadata.PropertyNames.Url;
			c.IsNullable = true;
			c.CharacterMaxLength = 255;
			m_columns.Add(c);

			c = new tgColumnMetadata(NcbicitationtempMetadata.ColumnNames.Text, 5, typeof(System.String), tgSystemType.String);
			c.PropertyName = NcbicitationtempMetadata.PropertyNames.Text;
			c.IsNullable = true;
			c.CharacterMaxLength = 5000;
			m_columns.Add(c);

			c = new tgColumnMetadata(NcbicitationtempMetadata.ColumnNames.TaxidList, 6, typeof(System.String), tgSystemType.String);
			c.PropertyName = NcbicitationtempMetadata.PropertyNames.TaxidList;
			c.IsNullable = true;
			m_columns.Add(c);
		}
		#endregion

		static public NcbicitationtempMetadata Meta()
		{
			return meta;
		}

		public Guid DataID
		{
			get { return base.m_dataID; }
		}

		public bool MultiProviderMode
		{
			get { return false; }
		}

		public tgColumnMetadataCollection Columns
		{
			get { return base.m_columns; }
		}

		#region ColumnNames
		public class ColumnNames
		{
			public const string CitId = "cit_id";
			public const string CitKey = "cit_key";
			public const string PubmedId = "pubmed_id";
			public const string MedlineId = "medline_id";
			public const string Url = "url";
			public const string Text = "text";
			public const string TaxidList = "taxid_list";
		}
		#endregion

		#region PropertyNames
		public class PropertyNames
		{
			public const string CitId = "CitId";
			public const string CitKey = "CitKey";
			public const string PubmedId = "PubmedId";
			public const string MedlineId = "MedlineId";
			public const string Url = "Url";
			public const string Text = "Text";
			public const string TaxidList = "TaxidList";
		}
		#endregion

		public tgProviderSpecificMetadata GetProviderMetadata(string mapName)
		{
			MapToMeta mapMethod = mapDelegates[mapName];
			if (mapMethod != null)
				return mapMethod(mapName);
			else
				return null;
		}

		#region MAP esDefault

		static private int RegisterDelegateesDefault()
		{
			// This is only executed once per the life of the application
			lock (typeof(NcbicitationtempMetadata))
			{
				if (NcbicitationtempMetadata.mapDelegates == null)
				{
					NcbicitationtempMetadata.mapDelegates = new Dictionary<string, MapToMeta>();
				}

				if (NcbicitationtempMetadata.meta == null)
				{
					NcbicitationtempMetadata.meta = new NcbicitationtempMetadata();
				}

				MapToMeta mapMethod = new MapToMeta(meta.tgDefault);
				mapDelegates.Add("tgDefault", mapMethod);
				mapMethod("tgDefault");
			}
			return 0;
		}

		private tgProviderSpecificMetadata tgDefault(string mapName)
		{
			if (!m_providerMetadataMaps.ContainsKey(mapName))
			{
				tgProviderSpecificMetadata meta = new tgProviderSpecificMetadata();


				meta.AddTypeMap("CitId", new tgTypeMap("integer", "System.Int32"));
				meta.AddTypeMap("CitKey", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("PubmedId", new tgTypeMap("integer", "System.Int32"));
				meta.AddTypeMap("MedlineId", new tgTypeMap("integer", "System.Int32"));
				meta.AddTypeMap("Url", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Text", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("TaxidList", new tgTypeMap("text", "System.String"));

				meta.Source = "ncbicitationtemp";
				meta.Destination = "ncbicitationtemp";

				meta.spInsert = "proc_NcbicitationtempInsert";
				meta.spUpdate = "proc_NcbicitationtempUpdate";
				meta.spDelete = "proc_NcbicitationtempDelete";
				meta.spLoadAll = "proc_NcbicitationtempLoadAll";
				meta.spLoadByPrimaryKey = "proc_NcbicitationtempLoadByPrimaryKey";

				this.m_providerMetadataMaps["tgDefault"] = meta;
			}

			return this.m_providerMetadataMaps["tgDefault"];
		}

		#endregion

		static private NcbicitationtempMetadata meta;
		static protected Dictionary<string, MapToMeta> mapDelegates;
		static private int _tgDefault = RegisterDelegateesDefault();
	}
}

