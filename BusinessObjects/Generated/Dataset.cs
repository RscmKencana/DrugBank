
//==============================================
// Generated by http://www.My2ndGeneration.com
//==============================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Linq;
using System.Data;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Tiraggo.Core;
using Tiraggo.Interfaces;
using Tiraggo.DynamicQuery;

namespace BusinessObjects
{

	//===============================================
	// Concrete Entity Class
	//===============================================
	[DebuggerDisplay("Data = {Debug}")]
	[Serializable]
	[DataContract]
	[KnownType(typeof(Dataset))]
	[XmlType("Dataset")]
	public partial class Dataset : tgDataset
	{
		[DebuggerBrowsable(DebuggerBrowsableState.RootHidden | DebuggerBrowsableState.Never)]
		protected override tgEntityDebuggerView[] Debug
		{
			get { return base.Debug; }
		}

		override public tgEntity CreateInstance()
		{
			return new Dataset();
		}

		#region Static Quick Access Methods
		static public void Delete(System.Int32 wID)
		{
			var obj = new Dataset();
			obj.WID = wID;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save();
		}

		static public void Delete(System.Int32 wID, tgSqlAccessType sqlAccessType)
		{
			var obj = new Dataset();
			obj.WID = wID;
			obj.AcceptChanges();
			obj.MarkAsDeleted();
			obj.Save(sqlAccessType);
		}
		#endregion
	}

	//===============================================
	// Abstract Entity Class
	//===============================================	
	[DataContract]
	[Serializable]
	abstract public partial class tgDataset : tgEntity
	{
		public tgDataset()
		{

		}

		#region LoadByPrimaryKey
		public virtual bool LoadByPrimaryKey(System.Int32 wID)
		{
			if (this.tg.Connection.SqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(wID);
			else
				return LoadByPrimaryKeyStoredProcedure(wID);
		}

		public virtual bool LoadByPrimaryKey(tgSqlAccessType sqlAccessType, System.Int32 wID)
		{
			if (sqlAccessType == tgSqlAccessType.DynamicSQL)
				return LoadByPrimaryKeyDynamic(wID);
			else
				return LoadByPrimaryKeyStoredProcedure(wID);
		}

		private bool LoadByPrimaryKeyDynamic(System.Int32 wID)
		{
			DatasetQuery query = new DatasetQuery("p2");
			query.Where(query.WID == wID);
			return this.Load(query);
		}

		private bool LoadByPrimaryKeyStoredProcedure(System.Int32 wID)
		{
			tgParameters parms = new tgParameters();
			parms.Add("WID", wID);
			return this.Load(tgQueryType.StoredProcedure, this.tg.spLoadByPrimaryKey, parms);
		}
		#endregion

		#region Properties

		/// <summary>
		/// Maps to Dataset.WID
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public int? WID
		{
			get
			{
				return base.GetSystemInt32(DatasetMetadata.ColumnNames.WID);
			}

			set
			{
				if (base.SetSystemInt32(DatasetMetadata.ColumnNames.WID, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.WID);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.Name
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Name
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.Name);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.Name, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.Name);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.Version
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Version
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.Version);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.Version, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.Version);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.ReleaseDate
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string ReleaseDate
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.ReleaseDate);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.ReleaseDate, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.ReleaseDate);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.LoadDate
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string LoadDate
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.LoadDate);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.LoadDate, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.LoadDate);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.ChangeDate
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string ChangeDate
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.ChangeDate);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.ChangeDate, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.ChangeDate);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.HomeURL
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string HomeURL
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.HomeURL);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.HomeURL, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.HomeURL);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.LoadedBy
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string LoadedBy
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.LoadedBy);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.LoadedBy, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.LoadedBy);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.Application
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Application
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.Application);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.Application, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.Application);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.ApplicationVersion
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string ApplicationVersion
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.ApplicationVersion);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.ApplicationVersion, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.ApplicationVersion);
				}
			}
		}

		/// <summary>
		/// Maps to Dataset.Status
		/// </summary>
		[DataMember(EmitDefaultValue = false)]
		virtual public string Status
		{
			get
			{
				return base.GetSystemString(DatasetMetadata.ColumnNames.Status);
			}

			set
			{
				if (base.SetSystemString(DatasetMetadata.ColumnNames.Status, value))
				{
					OnPropertyChanged(DatasetMetadata.PropertyNames.Status);
				}
			}
		}


		// For Tiraggo.js support and basic serialization of extra properties
		// brought back via Joins
		[DataMember(EmitDefaultValue = false)]
        public tgKeyValuePair[] tgExtendedData
        {
            get
            {
                Dictionary<string, object> extra = GetExtraColumns();

                if (extra.Keys.Count > 0)
                {
                    List<tgKeyValuePair> extended = new List<tgKeyValuePair>();

                    foreach (string key in extra.Keys)
                    {
                        extended.Add(new tgKeyValuePair { Key = key, Value = extra[key] });
                    }

                    return extended.ToArray();
                }

                return null;
            }

            set
            {
                foreach (tgKeyValuePair pair in value)
                {
                    this.SetColumn(pair.Key, pair.Value);
                }
            }
        }

		#endregion

		#region Housekeeping methods

		override protected IMetadata Meta
		{
			get
			{
				return DatasetMetadata.Meta();
			}
		}

		#endregion

		#region Query Logic

		public DatasetQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new DatasetQuery("q2");
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(DatasetQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return this.Query.Load();
		}

		protected void InitQuery(DatasetQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;

			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntity)this).Connection;
			}
		}

		#endregion

		[IgnoreDataMember]
		private DatasetQuery query;
	}

	//===============================================
	// Concrete Collection Class
	//===============================================
	[DebuggerDisplay("Count = {Count}")]
	[Serializable]
	[CollectionDataContract]
	[XmlType("DatasetCollection")]
	public partial class DatasetCollection : tgDatasetCollection, IEnumerable<Dataset>
	{
		public Dataset FindByPrimaryKey(int wID)
		{
			return this.SingleOrDefault(e => e.WID == wID);
		}

		#region WCF Service Class

		[DataContract]
		[KnownType(typeof(Dataset))]
		public class DatasetCollectionWCFPacket : tgCollectionWCFPacket<DatasetCollection>
		{
			public static implicit operator DatasetCollection(DatasetCollectionWCFPacket packet)
			{
				return packet.Collection;
			}

			public static implicit operator DatasetCollectionWCFPacket(DatasetCollection collection)
			{
				return new DatasetCollectionWCFPacket() { Collection = collection };
			}
		}

		#endregion
	}

	//===============================================
	// Abstract Collection Class
	//===============================================	
	[Serializable]
	abstract public partial class tgDatasetCollection : tgEntityCollection<Dataset>
	{
		#region Housekeeping methods
		override protected IMetadata Meta
		{
			get
			{
				return DatasetMetadata.Meta();
			}
		}

		protected override string GetCollectionName()
		{
			return "DatasetCollection";
		}

		#endregion

		#region Query Logic

		[BrowsableAttribute(false)]
		public DatasetQuery Query
		{
			get
			{
				if (this.query == null)
				{
					this.query = new DatasetQuery("r2");
					InitQuery(this.query);
				}

				return this.query;
			}
		}

		public bool Load(DatasetQuery query)
		{
			this.query = query;
			InitQuery(this.query);
			return Query.Load();
		}

		override protected tgDynamicQuery GetDynamicQuery()
		{
			if (this.query == null)
			{
				this.query = new DatasetQuery("s2");
				this.InitQuery(query);
			}
			return this.query;
		}

		protected void InitQuery(DatasetQuery query)
		{
			query.OnLoadDelegate = this.OnQueryLoaded;
			if (!query.tg2.HasConnection)
			{
				query.tg2.Connection = ((IEntityCollection)this).Connection;
			}
		}

		protected override void HookupQuery(tgDynamicQuery query)
		{
			this.InitQuery((DatasetQuery)query);
		}

		#endregion

		private DatasetQuery query;
	}	

	//===============================================
	// Concrete Query Class
	//===============================================	
	[DebuggerDisplay("Query = {Parse()}")]
	public partial class DatasetQuery : tgDatasetQuery
	{
		public DatasetQuery(string joinAlias)
		{
			this.tg.JoinAlias = joinAlias;
		}

		override protected string GetQueryName()
		{
			return "DatasetQuery";
		}

		#region Explicit Casts

		public static explicit operator string(DatasetQuery query)
		{
			return DatasetQuery.SerializeHelper.ToXml(query);
		}

		public static explicit operator DatasetQuery(string query)
		{
			return (DatasetQuery)DatasetQuery.SerializeHelper.FromXml(query, typeof(DatasetQuery));
		}

		#endregion
	}

	//===============================================
	// Abstract Query Class
	//===============================================
	abstract public partial class tgDatasetQuery : tgDynamicQuery
	{
		override protected IMetadata Meta
		{
			get
			{
				return DatasetMetadata.Meta();
			}
		}	

		#region QueryItemFromName

		protected override tgQueryItem QueryItemFromName(string name)
		{
			switch (name)
			{
				case "WID": return this.WID;
				case "Name": return this.Name;
				case "Version": return this.Version;
				case "ReleaseDate": return this.ReleaseDate;
				case "LoadDate": return this.LoadDate;
				case "ChangeDate": return this.ChangeDate;
				case "HomeURL": return this.HomeURL;
				case "LoadedBy": return this.LoadedBy;
				case "Application": return this.Application;
				case "ApplicationVersion": return this.ApplicationVersion;
				case "Status": return this.Status;

				default: return null;
			}
		}		

		#endregion

		#region tgQueryItems

		public tgQueryItem WID
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.WID, tgSystemType.Int32); }
		}

		public tgQueryItem Name
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.Name, tgSystemType.String); }
		}

		public tgQueryItem Version
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.Version, tgSystemType.String); }
		}

		public tgQueryItem ReleaseDate
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.ReleaseDate, tgSystemType.String); }
		}

		public tgQueryItem LoadDate
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.LoadDate, tgSystemType.String); }
		}

		public tgQueryItem ChangeDate
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.ChangeDate, tgSystemType.String); }
		}

		public tgQueryItem HomeURL
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.HomeURL, tgSystemType.String); }
		}

		public tgQueryItem LoadedBy
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.LoadedBy, tgSystemType.String); }
		}

		public tgQueryItem Application
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.Application, tgSystemType.String); }
		}

		public tgQueryItem ApplicationVersion
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.ApplicationVersion, tgSystemType.String); }
		}

		public tgQueryItem Status
		{
			get { return new tgQueryItem(this, DatasetMetadata.ColumnNames.Status, tgSystemType.String); }
		}


		#endregion
	}

	//===============================================
	// Concrete Metadata Class
	//===============================================
	[Serializable]
	public partial class DatasetMetadata : tgMetadata, IMetadata
	{
		#region Protected Constructor
		protected DatasetMetadata()
		{
			m_columns = new tgColumnMetadataCollection();
			tgColumnMetadata c;

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.WID, 0, typeof(System.Int32), tgSystemType.Int32);
			c.PropertyName = DatasetMetadata.PropertyNames.WID;
			c.IsInPrimaryKey = true;
			c.CharacterMaxLength = 20;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.Name, 1, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.Name;
			c.CharacterMaxLength = 255;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.Version, 2, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.Version;
			c.IsNullable = true;
			c.CharacterMaxLength = 50;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.ReleaseDate, 3, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.ReleaseDate;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.LoadDate, 4, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.LoadDate;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.ChangeDate, 5, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.ChangeDate;
			c.IsNullable = true;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.HomeURL, 6, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.HomeURL;
			c.IsNullable = true;
			c.CharacterMaxLength = 255;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.LoadedBy, 7, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.LoadedBy;
			c.IsNullable = true;
			c.CharacterMaxLength = 255;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.Application, 8, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.Application;
			c.IsNullable = true;
			c.CharacterMaxLength = 255;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.ApplicationVersion, 9, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.ApplicationVersion;
			c.IsNullable = true;
			c.CharacterMaxLength = 255;
			m_columns.Add(c);

			c = new tgColumnMetadata(DatasetMetadata.ColumnNames.Status, 10, typeof(System.String), tgSystemType.String);
			c.PropertyName = DatasetMetadata.PropertyNames.Status;
			c.CharacterMaxLength = 50;
			m_columns.Add(c);
		}
		#endregion

		static public DatasetMetadata Meta()
		{
			return meta;
		}

		public Guid DataID
		{
			get { return base.m_dataID; }
		}

		public bool MultiProviderMode
		{
			get { return false; }
		}

		public tgColumnMetadataCollection Columns
		{
			get { return base.m_columns; }
		}

		#region ColumnNames
		public class ColumnNames
		{
			public const string WID = "WID";
			public const string Name = "Name";
			public const string Version = "Version";
			public const string ReleaseDate = "ReleaseDate";
			public const string LoadDate = "LoadDate";
			public const string ChangeDate = "ChangeDate";
			public const string HomeURL = "HomeURL";
			public const string LoadedBy = "LoadedBy";
			public const string Application = "Application";
			public const string ApplicationVersion = "ApplicationVersion";
			public const string Status = "Status";
		}
		#endregion

		#region PropertyNames
		public class PropertyNames
		{
			public const string WID = "WID";
			public const string Name = "Name";
			public const string Version = "Version";
			public const string ReleaseDate = "ReleaseDate";
			public const string LoadDate = "LoadDate";
			public const string ChangeDate = "ChangeDate";
			public const string HomeURL = "HomeURL";
			public const string LoadedBy = "LoadedBy";
			public const string Application = "Application";
			public const string ApplicationVersion = "ApplicationVersion";
			public const string Status = "Status";
		}
		#endregion

		public tgProviderSpecificMetadata GetProviderMetadata(string mapName)
		{
			MapToMeta mapMethod = mapDelegates[mapName];
			if (mapMethod != null)
				return mapMethod(mapName);
			else
				return null;
		}

		#region MAP esDefault

		static private int RegisterDelegateesDefault()
		{
			// This is only executed once per the life of the application
			lock (typeof(DatasetMetadata))
			{
				if (DatasetMetadata.mapDelegates == null)
				{
					DatasetMetadata.mapDelegates = new Dictionary<string, MapToMeta>();
				}

				if (DatasetMetadata.meta == null)
				{
					DatasetMetadata.meta = new DatasetMetadata();
				}

				MapToMeta mapMethod = new MapToMeta(meta.tgDefault);
				mapDelegates.Add("tgDefault", mapMethod);
				mapMethod("tgDefault");
			}
			return 0;
		}

		private tgProviderSpecificMetadata tgDefault(string mapName)
		{
			if (!m_providerMetadataMaps.ContainsKey(mapName))
			{
				tgProviderSpecificMetadata meta = new tgProviderSpecificMetadata();


				meta.AddTypeMap("WID", new tgTypeMap("integer", "System.Int32"));
				meta.AddTypeMap("Name", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Version", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("ReleaseDate", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("LoadDate", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("ChangeDate", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("HomeURL", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("LoadedBy", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Application", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("ApplicationVersion", new tgTypeMap("text", "System.String"));
				meta.AddTypeMap("Status", new tgTypeMap("text", "System.String"));

				meta.Source = "dataset";
				meta.Destination = "dataset";

				meta.spInsert = "proc_DatasetInsert";
				meta.spUpdate = "proc_DatasetUpdate";
				meta.spDelete = "proc_DatasetDelete";
				meta.spLoadAll = "proc_DatasetLoadAll";
				meta.spLoadByPrimaryKey = "proc_DatasetLoadByPrimaryKey";

				this.m_providerMetadataMaps["tgDefault"] = meta;
			}

			return this.m_providerMetadataMaps["tgDefault"];
		}

		#endregion

		static private DatasetMetadata meta;
		static protected Dictionary<string, MapToMeta> mapDelegates;
		static private int _tgDefault = RegisterDelegateesDefault();
	}
}

